# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar DateTime
scalar Int64
scalar Upload

directive @loggedIn on FIELD_DEFINITION
directive @memberTeam on ARGUMENT_DEFINITION
directive @ownsProject on ARGUMENT_DEFINITION
directive @ownsTransformation on ARGUMENT_DEFINITION

type Team {
  id: Int64!
  slug: String!
  name: String!
  teamType: TeamType!
  created: DateTime!
  projects(projectId: Int64 @ownsProject): [Project!]!
  subscriptionPlans(subscriptionId: Int64): [SubscriptionPlan!]!
  members: [TeamMembership!]!
  invitees: [TeamInvite!]!
}

type AccountInfo {
  user: Userinfo!
  teams: [TeamMembership!]!
  invites: [TeamInvite!]!
}

type TeamMembership {
  membershipType: String!
  user: Userinfo!
  teamId: Int64!
  teamName: String!
}

type TeamInvite {
  inviteeEmail: String!
  slug: String!
  teamId: Int64!
  teamName: String!
}

type Project {
  id: Int64!
  teamId: Int64!
  title: String!
  sourceMedia: String!
  dubbingCreditsRequired: Int64
  transformations(transformationId: Int64 @ownsTransformation): [Transformation!]!
}

type Transformation {
  id: Int64!
  projectId: Int64!
  targetLanguage: String!
  targetMedia: String!
  transcript: String!
  isSource: Boolean!
  status: String!
  progress: Float!
}

type Userinfo {
  id: Int64!
  email: String!
  fullName: String!
}

type SubscriptionPlan {
  id: Int64!
  teamId: Int64!
  stripeSubscriptionId: String
  remainingCredits: Int64!
  subscriptionData: SubscriptionData
}

type SubscriptionData {
  currentPeriodStart: DateTime!
  currentPeriodEnd: DateTime!
  status: String!
  interval: String!
  planName: String!
  costInUsd: Int64!
  lastFourCardDigits: String!
}

type Query {
  getTeams: [Team!]! @loggedIn
  getTeamById(teamSlug: String! @memberTeam): Team! @loggedIn
  getUserInfo: AccountInfo! @loggedIn
}

type Mutation {
  createTeam(teamType: TeamType!, addTrial: Boolean!): Team! @loggedIn
  createProject(teamSlug: String! @memberTeam, title: String!, sourceMedia: Upload, youtubeLink: String, uploadOption: UploadOption!, initialTargetLanguage: String, initialLipSync: Boolean!): Project! @loggedIn
  deleteProject(projectId: Int64! @ownsProject): Project! @loggedIn
  createTranslation(projectId: Int64! @ownsProject, targetLanguage: String!, lipSync: Boolean!): Transformation! @loggedIn
  deleteTransformation(transformationId: Int64! @ownsTransformation): Transformation! @loggedIn
  createCheckoutSession(teamSlug: String! @memberTeam, lookUpKey: String!): CheckoutSessionResponse! @loggedIn
  createPortalSession(teamSlug: String! @memberTeam): PortalSessionResponse! @loggedIn
  sendTeamInvite(teamSlug: String! @memberTeam, inviteeEmail: String!): Boolean!
  deleteTeamInvite(teamSlug: String! @memberTeam, inviteSlug: String!): Boolean!
}

type CheckoutSessionResponse {
  sessionId: String!
}

type PortalSessionResponse {
  sessionUrl: String!
}

enum TeamType {
  PERSONAL
  TEAM
}

enum UploadOption {
  FILE_UPLOAD
  YOUTUBE_LINK
}

