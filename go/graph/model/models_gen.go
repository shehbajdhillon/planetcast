// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type SupportedLanguage string

const (
	SupportedLanguageEnglish    SupportedLanguage = "ENGLISH"
	SupportedLanguageJapanese   SupportedLanguage = "JAPANESE"
	SupportedLanguageChinese    SupportedLanguage = "CHINESE"
	SupportedLanguageGerman     SupportedLanguage = "GERMAN"
	SupportedLanguageHindi      SupportedLanguage = "HINDI"
	SupportedLanguageFrench     SupportedLanguage = "FRENCH"
	SupportedLanguageKorean     SupportedLanguage = "KOREAN"
	SupportedLanguagePortuguese SupportedLanguage = "PORTUGUESE"
	SupportedLanguageItalian    SupportedLanguage = "ITALIAN"
	SupportedLanguageSpanish    SupportedLanguage = "SPANISH"
	SupportedLanguageIndonesian SupportedLanguage = "INDONESIAN"
	SupportedLanguageDutch      SupportedLanguage = "DUTCH"
	SupportedLanguageTurkish    SupportedLanguage = "TURKISH"
	SupportedLanguageFilipino   SupportedLanguage = "FILIPINO"
	SupportedLanguagePolish     SupportedLanguage = "POLISH"
	SupportedLanguageSwedish    SupportedLanguage = "SWEDISH"
	SupportedLanguageBulgarian  SupportedLanguage = "BULGARIAN"
	SupportedLanguageRomanian   SupportedLanguage = "ROMANIAN"
	SupportedLanguageArabic     SupportedLanguage = "ARABIC"
	SupportedLanguageCzech      SupportedLanguage = "CZECH"
	SupportedLanguageGreek      SupportedLanguage = "GREEK"
	SupportedLanguageFinnish    SupportedLanguage = "FINNISH"
	SupportedLanguageCroatian   SupportedLanguage = "CROATIAN"
	SupportedLanguageMalay      SupportedLanguage = "MALAY"
	SupportedLanguageSlovak     SupportedLanguage = "SLOVAK"
	SupportedLanguageDanish     SupportedLanguage = "DANISH"
	SupportedLanguageTamil      SupportedLanguage = "TAMIL"
	SupportedLanguageUkrainian  SupportedLanguage = "UKRAINIAN"
)

var AllSupportedLanguage = []SupportedLanguage{
	SupportedLanguageEnglish,
	SupportedLanguageJapanese,
	SupportedLanguageChinese,
	SupportedLanguageGerman,
	SupportedLanguageHindi,
	SupportedLanguageFrench,
	SupportedLanguageKorean,
	SupportedLanguagePortuguese,
	SupportedLanguageItalian,
	SupportedLanguageSpanish,
	SupportedLanguageIndonesian,
	SupportedLanguageDutch,
	SupportedLanguageTurkish,
	SupportedLanguageFilipino,
	SupportedLanguagePolish,
	SupportedLanguageSwedish,
	SupportedLanguageBulgarian,
	SupportedLanguageRomanian,
	SupportedLanguageArabic,
	SupportedLanguageCzech,
	SupportedLanguageGreek,
	SupportedLanguageFinnish,
	SupportedLanguageCroatian,
	SupportedLanguageMalay,
	SupportedLanguageSlovak,
	SupportedLanguageDanish,
	SupportedLanguageTamil,
	SupportedLanguageUkrainian,
}

func (e SupportedLanguage) IsValid() bool {
	switch e {
	case SupportedLanguageEnglish, SupportedLanguageJapanese, SupportedLanguageChinese, SupportedLanguageGerman, SupportedLanguageHindi, SupportedLanguageFrench, SupportedLanguageKorean, SupportedLanguagePortuguese, SupportedLanguageItalian, SupportedLanguageSpanish, SupportedLanguageIndonesian, SupportedLanguageDutch, SupportedLanguageTurkish, SupportedLanguageFilipino, SupportedLanguagePolish, SupportedLanguageSwedish, SupportedLanguageBulgarian, SupportedLanguageRomanian, SupportedLanguageArabic, SupportedLanguageCzech, SupportedLanguageGreek, SupportedLanguageFinnish, SupportedLanguageCroatian, SupportedLanguageMalay, SupportedLanguageSlovak, SupportedLanguageDanish, SupportedLanguageTamil, SupportedLanguageUkrainian:
		return true
	}
	return false
}

func (e SupportedLanguage) String() string {
	return string(e)
}

func (e *SupportedLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SupportedLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SupportedLanguage", str)
	}
	return nil
}

func (e SupportedLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UploadOption string

const (
	UploadOptionFileUpload  UploadOption = "FILE_UPLOAD"
	UploadOptionYoutubeLink UploadOption = "YOUTUBE_LINK"
)

var AllUploadOption = []UploadOption{
	UploadOptionFileUpload,
	UploadOptionYoutubeLink,
}

func (e UploadOption) IsValid() bool {
	switch e {
	case UploadOptionFileUpload, UploadOptionYoutubeLink:
		return true
	}
	return false
}

func (e UploadOption) String() string {
	return string(e)
}

func (e *UploadOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UploadOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UploadOption", str)
	}
	return nil
}

func (e UploadOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
