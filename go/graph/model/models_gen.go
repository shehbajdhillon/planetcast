// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type SupportedLanguage string

const (
	SupportedLanguageEnglish    SupportedLanguage = "ENGLISH"
	SupportedLanguageGerman     SupportedLanguage = "GERMAN"
	SupportedLanguageFrench     SupportedLanguage = "FRENCH"
	SupportedLanguageSpanish    SupportedLanguage = "SPANISH"
	SupportedLanguageItalian    SupportedLanguage = "ITALIAN"
	SupportedLanguagePortuguese SupportedLanguage = "PORTUGUESE"
	SupportedLanguagePolish     SupportedLanguage = "POLISH"
)

var AllSupportedLanguage = []SupportedLanguage{
	SupportedLanguageEnglish,
	SupportedLanguageGerman,
	SupportedLanguageFrench,
	SupportedLanguageSpanish,
	SupportedLanguageItalian,
	SupportedLanguagePortuguese,
	SupportedLanguagePolish,
}

func (e SupportedLanguage) IsValid() bool {
	switch e {
	case SupportedLanguageEnglish, SupportedLanguageGerman, SupportedLanguageFrench, SupportedLanguageSpanish, SupportedLanguageItalian, SupportedLanguagePortuguese, SupportedLanguagePolish:
		return true
	}
	return false
}

func (e SupportedLanguage) String() string {
	return string(e)
}

func (e *SupportedLanguage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SupportedLanguage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SupportedLanguage", str)
	}
	return nil
}

func (e SupportedLanguage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UploadOption string

const (
	UploadOptionFileUpload  UploadOption = "FILE_UPLOAD"
	UploadOptionYoutubeLink UploadOption = "YOUTUBE_LINK"
)

var AllUploadOption = []UploadOption{
	UploadOptionFileUpload,
	UploadOptionYoutubeLink,
}

func (e UploadOption) IsValid() bool {
	switch e {
	case UploadOptionFileUpload, UploadOptionYoutubeLink:
		return true
	}
	return false
}

func (e UploadOption) String() string {
	return string(e)
}

func (e *UploadOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UploadOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UploadOption", str)
	}
	return nil
}

func (e UploadOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
